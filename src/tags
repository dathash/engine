!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/alexhartford/Home/code/engine/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/1901123c/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
AddBezierCurve	../ext/imgui/imgui.h	/^    inline    void  AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const I/;"	f	struct:ImDrawList	typeref:typename:void
AddChar	../ext/imgui/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AdvanceX	../ext/imgui/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
Alpha	../ext/imgui/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AnalogValue	../ext/imgui/imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AntiAliasedFill	../ext/imgui/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	../ext/imgui/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	../ext/imgui/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppFocusLost	../ext/imgui/imgui.h	/^    bool        AppFocusLost;$/;"	m	struct:ImGuiIO	typeref:typename:bool
Ascent	../ext/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
BackendFlags	../ext/imgui/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	../ext/imgui/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	../ext/imgui/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	../ext/imgui/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	../ext/imgui/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	../ext/imgui/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendUsingLegacyKeyArrays	../ext/imgui/imgui.h	/^    ImS8        BackendUsingLegacyKeyArrays;        \/\/ -1: unknown, 0: using AddKeyEvent(), 1:/;"	m	struct:ImGuiIO	typeref:typename:ImS8
BackendUsingLegacyNavInputArray	../ext/imgui/imgui.h	/^    bool        BackendUsingLegacyNavInputArray;    \/\/ 0: using AddKeyAnalogEvent(), 1: writin/;"	m	struct:ImGuiIO	typeref:typename:bool
BeginPopupContextWindow	../ext/imgui/imgui.h	/^    static inline bool  BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mb, bool ov/;"	f	namespace:ImGui	typeref:typename:bool
Buf	../ext/imgui/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	../ext/imgui/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
BufDirty	../ext/imgui/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	../ext/imgui/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	../ext/imgui/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
ButtonTextAlign	../ext/imgui/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Capacity	../ext/imgui/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CellPadding	../ext/imgui/imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ChannelsMerge	../ext/imgui/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	../ext/imgui/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	../ext/imgui/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChildBorderSize	../ext/imgui/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildRounding	../ext/imgui/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
CircleTessellationMaxError	../ext/imgui/imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
Clear	../ext/imgui/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	../ext/imgui/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	../ext/imgui/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	../ext/imgui/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	../ext/imgui/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	../ext/imgui/imgui.h	/^    void Clear()    { memset(this, 0, sizeof(*this)); }     \/\/ The ImDrawList are owned by ImG/;"	f	struct:ImDrawData	typeref:typename:void
ClearSelection	../ext/imgui/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClipRect	../ext/imgui/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	../ext/imgui/imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipboardUserData	../ext/imgui/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
CmdBuffer	../ext/imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	../ext/imgui/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList /;"	m	struct:ImDrawData	typeref:typename:ImDrawList **
CmdListsCount	../ext/imgui/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	../ext/imgui/imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
ColorButtonPosition	../ext/imgui/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
Colored	../ext/imgui/imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colors	../ext/imgui/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
ColumnIndex	../ext/imgui/imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	../ext/imgui/imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
ColumnsMinSpacing	../ext/imgui/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ConfigData	../ext/imgui/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	../ext/imgui/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	../ext/imgui/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDragClickToInputText	../ext/imgui/imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	../ext/imgui/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	../ext/imgui/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	../ext/imgui/imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	../ext/imgui/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	../ext/imgui/imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigWindowsMoveFromTitleBarOnly	../ext/imgui/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	../ext/imgui/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	../ext/imgui/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
CountGrep	../ext/imgui/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
CurrentSize	../ext/imgui/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CursorPos	../ext/imgui/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CurveTessellationTol	../ext/imgui/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CustomRects	../ext/imgui/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
Data	../ext/imgui/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	../ext/imgui/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	../ext/imgui/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
DataFrameCount	../ext/imgui/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	../ext/imgui/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	../ext/imgui/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
Delivery	../ext/imgui/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	../ext/imgui/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Descent	../ext/imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DesiredSize	../ext/imgui/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DirtyLookupTables	../ext/imgui/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
DisabledAlpha	../ext/imgui/imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisplayEnd	../ext/imgui/imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	../ext/imgui/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayPos	../ext/imgui/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySafeAreaPadding	../ext/imgui/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	../ext/imgui/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	../ext/imgui/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	../ext/imgui/imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	../ext/imgui/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DotChar	../ext/imgui/imgui.h	/^    ImWchar                     DotChar;            \/\/ 2     \/\/ out \/\/ = '.'      \/\/ Cha/;"	m	struct:ImFont	typeref:typename:ImWchar
Down	../ext/imgui/imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
DownDuration	../ext/imgui/imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	../ext/imgui/imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DragFloat	../ext/imgui/imgui.h	/^    static inline bool  DragFloat(const char* label, float* v, float v_speed, float v_min, float/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat2	../ext/imgui/imgui.h	/^    static inline bool  DragFloat2(const char* label, float v[2], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat3	../ext/imgui/imgui.h	/^    static inline bool  DragFloat3(const char* label, float v[3], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DragFloat4	../ext/imgui/imgui.h	/^    static inline bool  DragFloat4(const char* label, float v[4], float v_speed, float v_min, fl/;"	f	namespace:ImGui	typeref:typename:bool
DstFont	../ext/imgui/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
ElemCount	../ext/imgui/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
EllipsisChar	../ext/imgui/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = '...'    \/\/ Cha/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	../ext/imgui/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EmptyString	../ext/imgui/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
EventChar	../ext/imgui/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventKey	../ext/imgui/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
FallbackAdvanceX	../ext/imgui/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	../ext/imgui/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	../ext/imgui/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Filters	../ext/imgui/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
Flags	../ext/imgui/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	../ext/imgui/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	../ext/imgui/imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Font	../ext/imgui/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
FontAllowUserScaling	../ext/imgui/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontBuilderFlags	../ext/imgui/imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	../ext/imgui/imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	../ext/imgui/imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontData	../ext/imgui/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	../ext/imgui/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	../ext/imgui/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	../ext/imgui/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	../ext/imgui/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontNo	../ext/imgui/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	../ext/imgui/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
Fonts	../ext/imgui/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	../ext/imgui/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
FrameBorderSize	../ext/imgui/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FramePadding	../ext/imgui/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FrameRounding	../ext/imgui/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FramebufferScale	../ext/imgui/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	../ext/imgui/imgui.h	/^    float       Framerate;                          \/\/ Rough estimate of application framerate/;"	m	struct:ImGuiIO	typeref:typename:float
GetBit	../ext/imgui/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetCenter	../ext/imgui/imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCharAdvance	../ext/imgui/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	../ext/imgui/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	../ext/imgui/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardTextFn	../ext/imgui/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetCustomRectByIndex	../ext/imgui/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	../ext/imgui/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetTexID	../ext/imgui/imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetWindowContentRegionWidth	../ext/imgui/imgui.h	/^    static inline float GetWindowContentRegionWidth() { return GetWindowContentRegionMax().x - G/;"	f	namespace:ImGui	typeref:typename:float
GetWorkCenter	../ext/imgui/imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GlyphAdvanceX	../ext/imgui/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	../ext/imgui/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	../ext/imgui/imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphMaxAdvanceX	../ext/imgui/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	../ext/imgui/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	../ext/imgui/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	../ext/imgui/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	../ext/imgui/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list o/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	../ext/imgui/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GrabMinSize	../ext/imgui/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	../ext/imgui/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
HSV	../ext/imgui/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasSelection	../ext/imgui/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
Height	../ext/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
IMGUI_API	../ext/imgui/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CHECKVERSION	../ext/imgui/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_HAS_TABLE	../ext/imgui/imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_IMPL_API	../ext/imgui/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_3F	../ext/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	../ext/imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_VERSION	../ext/imgui/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	../ext/imgui/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IM_ALLOC	../ext/imgui/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	../ext/imgui/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	../ext/imgui/imgui.h	/^#define IM_ASSERT(/;"	d
IM_COL32	../ext/imgui/imgui.h	/^#define IM_COL32(R,G,B,A)    (((ImU32)(A)<<IM_COL32_A_SHIFT) | ((ImU32)(B)<<IM_COL32_B_SHIFT) | /;"	d
IM_COL32_A_MASK	../ext/imgui/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	../ext/imgui/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	../ext/imgui/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	../ext/imgui/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	../ext/imgui/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_G_SHIFT	../ext/imgui/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	../ext/imgui/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	../ext/imgui/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DELETE	../ext/imgui/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	../ext/imgui/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_FMTARGS	../ext/imgui/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	../ext/imgui/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	../ext/imgui/imgui.h	/^#define IM_FREE(/;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	../ext/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	../ext/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	../ext/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	../ext/imgui/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_NEW	../ext/imgui/imgui.h	/^#define IM_NEW(/;"	d
IM_OFFSETOF	../ext/imgui/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PLACEMENT_NEW	../ext/imgui/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_UNICODE_CODEPOINT_INVALID	../ext/imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	../ext/imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	../ext/imgui/imgui.h	/^#define IM_UNUSED(/;"	d
IdxBuffer	../ext/imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	../ext/imgui/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImColor	../ext/imgui/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	../ext/imgui/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f \/ 255.0f;/;"	f	struct:ImColor
ImColor	../ext/imgui/imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	../ext/imgui/imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	../ext/imgui/imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	../ext/imgui/imgui.h	/^struct ImColor$/;"	s
ImDrawCallback	../ext/imgui/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	../ext/imgui/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	../ext/imgui/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	../ext/imgui/imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	../ext/imgui/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	../ext/imgui/imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCornerFlags	../ext/imgui/imgui.h	/^typedef ImDrawFlags ImDrawCornerFlags;$/;"	t	typeref:typename:ImDrawFlags
ImDrawCornerFlags_	../ext/imgui/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_All       = ImDrawFlags_RoundCornersAll,          \/\/ Was == 0x0F prior t/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_BotLeft   = ImDrawFlags_RoundCornersBottomLeft,   \/\/ Was == 0x04 (1 << 2/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_BotRight  = ImDrawFlags_RoundCornersBottomRight,  \/\/ Was == 0x08 (1 << 3/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_None	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_None      = ImDrawFlags_RoundCornersNone,         \/\/ Was == 0 prior to 1/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_TopLeft   = ImDrawFlags_RoundCornersTopLeft,      \/\/ Was == 0x01 (1 << 0/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	../ext/imgui/imgui.h	/^    ImDrawCornerFlags_TopRight  = ImDrawFlags_RoundCornersTopRight,     \/\/ Was == 0x02 (1 << 1/;"	e	enum:ImDrawCornerFlags_
ImDrawData	../ext/imgui/imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	../ext/imgui/imgui.h	/^struct ImDrawData$/;"	s
ImDrawFlags	../ext/imgui/imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	../ext/imgui/imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	../ext/imgui/imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	../ext/imgui/imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	../ext/imgui/imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	../ext/imgui/imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	../ext/imgui/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data /;"	f	struct:ImDrawList
ImDrawList	../ext/imgui/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	../ext/imgui/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	../ext/imgui/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	../ext/imgui/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3   \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	../ext/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	../ext/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	../ext/imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	../ext/imgui/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSplitter	../ext/imgui/imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	../ext/imgui/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	../ext/imgui/imgui.h	/^struct ImDrawVert$/;"	s
ImFont	../ext/imgui/imgui.h	/^struct ImFont$/;"	s
ImFontAtlas	../ext/imgui/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlasCustomRect	../ext/imgui/imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	../ext/imgui/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	../ext/imgui/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	../ext/imgui/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	../ext/imgui/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2    \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	../ext/imgui/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	../ext/imgui/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	../ext/imgui/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontConfig	../ext/imgui/imgui.h	/^struct ImFontConfig$/;"	s
ImFontGlyph	../ext/imgui/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	../ext/imgui/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	../ext/imgui/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImGui	../ext/imgui/imgui.h	/^namespace ImGui$/;"	n
ImGuiBackendFlags	../ext/imgui/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	../ext/imgui/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	../ext/imgui/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	../ext/imgui/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	../ext/imgui/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	../ext/imgui/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	../ext/imgui/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3    \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	../ext/imgui/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlags_	../ext/imgui/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_MouseButtonDefault_	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_None	../ext/imgui/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiCol	../ext/imgui/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	../ext/imgui/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	../ext/imgui/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	../ext/imgui/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	../ext/imgui/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	../ext/imgui/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	../ext/imgui/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	../ext/imgui/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	../ext/imgui/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	../ext/imgui/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	../ext/imgui/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	../ext/imgui/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	../ext/imgui/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	../ext/imgui/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	../ext/imgui/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	../ext/imgui/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	../ext/imgui/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	../ext/imgui/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	../ext/imgui/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	../ext/imgui/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	../ext/imgui/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	../ext/imgui/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	../ext/imgui/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	../ext/imgui/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	../ext/imgui/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	../ext/imgui/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	../ext/imgui/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	../ext/imgui/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	../ext/imgui/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	../ext/imgui/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	../ext/imgui/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	../ext/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	../ext/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	../ext/imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	../ext/imgui/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	../ext/imgui/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	../ext/imgui/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	../ext/imgui/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	../ext/imgui/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	../ext/imgui/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	../ext/imgui/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	../ext/imgui/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	../ext/imgui/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	../ext/imgui/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	../ext/imgui/imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	../ext/imgui/imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	../ext/imgui/imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	../ext/imgui/imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	../ext/imgui/imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	../ext/imgui/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	../ext/imgui/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	../ext/imgui/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	../ext/imgui/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	../ext/imgui/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	../ext/imgui/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	../ext/imgui/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	../ext/imgui/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	../ext/imgui/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	../ext/imgui/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiComboFlags	../ext/imgui/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlags_	../ext/imgui/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	../ext/imgui/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	../ext/imgui/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	../ext/imgui/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	../ext/imgui/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	../ext/imgui/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	../ext/imgui/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	../ext/imgui/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	../ext/imgui/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	../ext/imgui/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiCond	../ext/imgui/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	../ext/imgui/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	../ext/imgui/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable)$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	../ext/imgui/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	../ext/imgui/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	../ext/imgui/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	../ext/imgui/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	../ext/imgui/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	../ext/imgui/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	../ext/imgui/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiDataType	../ext/imgui/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataType_	../ext/imgui/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	../ext/imgui/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	../ext/imgui/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	../ext/imgui/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S16	../ext/imgui/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	../ext/imgui/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	../ext/imgui/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	../ext/imgui/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U16	../ext/imgui/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	../ext/imgui/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	../ext/imgui/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	../ext/imgui/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDir	../ext/imgui/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	../ext/imgui/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	../ext/imgui/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	../ext/imgui/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	../ext/imgui/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	../ext/imgui/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	../ext/imgui/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	../ext/imgui/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	../ext/imgui/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	../ext/imgui/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	../ext/imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful ca/;"	e	enum:ImGuiDragDropFlags_
ImGuiFocusedFlags	../ext/imgui/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	../ext/imgui/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	../ext/imgui/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiHoveredFlags	../ext/imgui/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlags_	../ext/imgui/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 10,  \/\/ Disable using gamepad\/keyb/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	../ext/imgui/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	../ext/imgui/imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIO	../ext/imgui/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputTextCallback	../ext/imgui/imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	../ext/imgui/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextFlags	../ext/imgui/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlags_	../ext/imgui/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	../ext/imgui/imgui.h	/^    , ImGuiInputTextFlags_AlwaysInsertMode    = ImGuiInputTextFlags_AlwaysOverwrite   \/\/ [rena/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 13,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 19   \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	../ext/imgui/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiKey	../ext/imgui/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifi/;"	t	typeref:typename:int
ImGuiKeyData	../ext/imgui/imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyModFlags	../ext/imgui/imgui.h	/^typedef int ImGuiKeyModFlags;$/;"	t	typeref:typename:int
ImGuiKeyModFlags_	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	g
ImGuiKeyModFlags_Alt	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Ctrl	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_None	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Shift	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	e	enum:ImGuiKeyModFlags_
ImGuiKeyModFlags_Super	../ext/imgui/imgui.h	/^enum ImGuiKeyModFlags_ { ImGuiKeyModFlags_None = ImGuiModFlags_None, ImGuiKeyModFlags_Ctrl = ImG/;"	e	enum:ImGuiKeyModFlags_
ImGuiKey_	../ext/imgui/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_0	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_1	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_2	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_3	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_4	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_5	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_6	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_7	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_8	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_9	../ext/imgui/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_A	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Apostrophe	../ext/imgui/imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey_
ImGuiKey_B	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Backslash	../ext/imgui/imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	../ext/imgui/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	../ext/imgui/imgui.h	/^    ImGuiKey_COUNT,                 \/\/ No valid ImGuiKey is ever greater than this value$/;"	e	enum:ImGuiKey_
ImGuiKey_CapsLock	../ext/imgui/imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey_
ImGuiKey_Comma	../ext/imgui/imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey_
ImGuiKey_D	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	../ext/imgui/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	../ext/imgui/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_E	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_End	../ext/imgui/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	../ext/imgui/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Equal	../ext/imgui/imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	../ext/imgui/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_F	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_F1	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F10	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_F11	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_F12	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_F2	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F3	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F4	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F5	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F6	../ext/imgui/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey_
ImGuiKey_F7	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_F8	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_F9	../ext/imgui/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey_
ImGuiKey_G	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadBack	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)          - (Switch)   Share (PS)         \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadDpadDown	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                           \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadDpadLeft	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                           \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadDpadRight	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                          \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadDpadUp	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                             \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadFaceDown	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)             B (Switch)   Cross (PS)         \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadFaceLeft	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)             Y (Switch)   Square (PS)        \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadFaceRight	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)             A (Switch)   Circle (PS)        \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadFaceUp	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)             X (Switch)   Triangle (PS)      \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadL1	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)      L (Switch)   L1 (PS)            \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadL2	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trigger (Xbox)     ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadL3	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Thumbstick (Xbox)  L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadLStickDown	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                             \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadLStickLeft	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                             \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadLStickRight	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                             \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadLStickUp	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                             \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadR1	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)      R (Switch)   R1 (PS)            \//;"	e	enum:ImGuiKey_
ImGuiKey_GamepadR2	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trigger (Xbox)     ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadR3	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Thumbstick (Xbox)  R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadRStickDown	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadRStickLeft	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadRStickRight	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadRStickUp	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey_
ImGuiKey_GamepadStart	../ext/imgui/imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)          + (Switch)   Start\/Options (PS) \//;"	e	enum:ImGuiKey_
ImGuiKey_GraveAccent	../ext/imgui/imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey_
ImGuiKey_H	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Home	../ext/imgui/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_I	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	../ext/imgui/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_J	../ext/imgui/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_K	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_KeyPadEnter	../ext/imgui/imgui.h	/^    , ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter   \/\/ Renamed in 1.87$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad0	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad1	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad2	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad3	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad4	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad5	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad6	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad7	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad8	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey_
ImGuiKey_Keypad9	../ext/imgui/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadAdd	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadDecimal	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadDivide	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadEnter	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadEqual	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadMultiply	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeypadSubtract	../ext/imgui/imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeysData_OFFSET	../ext/imgui/imgui.h	/^    ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN           \/\/ First key stored in/;"	e	enum:ImGuiKey_
ImGuiKey_KeysData_SIZE	../ext/imgui/imgui.h	/^    ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,          \/\/ Size of KeysData[]:/;"	e	enum:ImGuiKey_
ImGuiKey_L	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_LeftAlt	../ext/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	../ext/imgui/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftBracket	../ext/imgui/imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftCtrl	../ext/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftShift	../ext/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftSuper	../ext/imgui/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_M	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Menu	../ext/imgui/imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey_
ImGuiKey_Minus	../ext/imgui/imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey_
ImGuiKey_ModAlt	../ext/imgui/imgui.h	/^    ImGuiKey_ModCtrl, ImGuiKey_ModShift, ImGuiKey_ModAlt, ImGuiKey_ModSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_ModCtrl	../ext/imgui/imgui.h	/^    ImGuiKey_ModCtrl, ImGuiKey_ModShift, ImGuiKey_ModAlt, ImGuiKey_ModSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_ModShift	../ext/imgui/imgui.h	/^    ImGuiKey_ModCtrl, ImGuiKey_ModShift, ImGuiKey_ModAlt, ImGuiKey_ModSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_ModSuper	../ext/imgui/imgui.h	/^    ImGuiKey_ModCtrl, ImGuiKey_ModShift, ImGuiKey_ModAlt, ImGuiKey_ModSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_N	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_NamedKey_BEGIN	../ext/imgui/imgui.h	/^    ImGuiKey_NamedKey_BEGIN         = 512,$/;"	e	enum:ImGuiKey_
ImGuiKey_NamedKey_COUNT	../ext/imgui/imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey_
ImGuiKey_NamedKey_END	../ext/imgui/imgui.h	/^    ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey_
ImGuiKey_None	../ext/imgui/imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey_
ImGuiKey_NumLock	../ext/imgui/imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey_
ImGuiKey_O	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_P	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	../ext/imgui/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	../ext/imgui/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_Pause	../ext/imgui/imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey_
ImGuiKey_Period	../ext/imgui/imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey_
ImGuiKey_PrintScreen	../ext/imgui/imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey_
ImGuiKey_Q	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_R	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_RightAlt	../ext/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	../ext/imgui/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightBracket	../ext/imgui/imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey_
ImGuiKey_RightCtrl	../ext/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightShift	../ext/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightSuper	../ext/imgui/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey_
ImGuiKey_S	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_ScrollLock	../ext/imgui/imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey_
ImGuiKey_Semicolon	../ext/imgui/imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey_
ImGuiKey_Slash	../ext/imgui/imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	../ext/imgui/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_T	../ext/imgui/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	../ext/imgui/imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey_
ImGuiKey_U	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	../ext/imgui/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiKey_W	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiKey_X	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	../ext/imgui/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey_
ImGuiListClipper	../ext/imgui/imgui.h	/^    inline ImGuiListClipper(int items_count, float items_height = -1.0f) { memset(this, 0, sizeo/;"	f	struct:ImGuiListClipper
ImGuiListClipper	../ext/imgui/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiMemAllocFunc	../ext/imgui/imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	../ext/imgui/imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiModFlags	../ext/imgui/imgui.h	/^typedef int ImGuiModFlags;          \/\/ -> enum ImGuiModFlags_        \/\/ Flags: for io.KeyMod/;"	t	typeref:typename:int
ImGuiModFlags_	../ext/imgui/imgui.h	/^enum ImGuiModFlags_$/;"	g
ImGuiModFlags_Alt	../ext/imgui/imgui.h	/^    ImGuiModFlags_Alt               = 1 << 2,   \/\/ Menu$/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Ctrl	../ext/imgui/imgui.h	/^    ImGuiModFlags_Ctrl              = 1 << 0,$/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_None	../ext/imgui/imgui.h	/^    ImGuiModFlags_None              = 0,$/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Shift	../ext/imgui/imgui.h	/^    ImGuiModFlags_Shift             = 1 << 1,$/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Super	../ext/imgui/imgui.h	/^    ImGuiModFlags_Super             = 1 << 3    \/\/ Cmd\/Super\/Windows key$/;"	e	enum:ImGuiModFlags_
ImGuiMouseButton	../ext/imgui/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	../ext/imgui/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	../ext/imgui/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	../ext/imgui/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	../ext/imgui/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	../ext/imgui/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	../ext/imgui/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	../ext/imgui/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	../ext/imgui/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavInput	../ext/imgui/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input ident/;"	t	typeref:typename:int
ImGuiNavInput_	../ext/imgui/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	../ext/imgui/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ Activate \/ Open \/ Toggle \/ Tweak value       \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	../ext/imgui/imgui.h	/^    ImGuiNavInput_COUNT$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	../ext/imgui/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ Cancel \/ Close \/ Exit                        \/\/ e.g. C/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	../ext/imgui/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	../ext/imgui/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ Move \/ Tweak \/ Resize window (w\/ PadMenu)    \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	../ext/imgui/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	../ext/imgui/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	../ext/imgui/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ Focus Prev window (w\/ PadMenu)               \/\/ e.g. R1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	../ext/imgui/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ Focus Next window (w\/ PadMenu)               \/\/ e.g. L1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	../ext/imgui/imgui.h	/^    ImGuiNavInput_Input,         \/\/ Text input \/ On-Screen keyboard              \/\/ e.g. Tr/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	../ext/imgui/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ Move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	../ext/imgui/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ Move left                                    \/\/ = Arrow /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	../ext/imgui/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ Move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	../ext/imgui/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ Move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	../ext/imgui/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	../ext/imgui/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ Scroll \/ Move window (w\/ PadMenu)            \/\/ e.g. L/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	../ext/imgui/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	../ext/imgui/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	../ext/imgui/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ Tap: Toggle menu \/ Hold: Focus, Move, Resize \/\/ e.g. Sq/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	../ext/imgui/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ Faster tweaks                                \/\/ e.g. R1 /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	../ext/imgui/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ Slower tweaks                                \/\/ e.g. L1 /;"	e	enum:ImGuiNavInput_
ImGuiOnceUponAFrame	../ext/imgui/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	../ext/imgui/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	../ext/imgui/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	../ext/imgui/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformImeData	../ext/imgui/imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	../ext/imgui/imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPopupFlags	../ext/imgui/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	../ext/imgui/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 7,   \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 8,   \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 6,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	../ext/imgui/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiSelectableFlags	../ext/imgui/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlags_	../ext/imgui/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 4    \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent po/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_None	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAllColumns	../ext/imgui/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all colum/;"	e	enum:ImGuiSelectableFlags_
ImGuiSizeCallback	../ext/imgui/imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	../ext/imgui/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	../ext/imgui/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlags_	../ext/imgui/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ClampOnInput	../ext/imgui/imgui.h	/^    , ImGuiSliderFlags_ClampOnInput = ImGuiSliderFlags_AlwaysClamp \/\/ [renamed in 1.79]$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F    \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	../ext/imgui/imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSortDirection	../ext/imgui/imgui.h	/^typedef int ImGuiSortDirection;     \/\/ -> enum ImGuiSortDirection_   \/\/ Enum: A sorting dire/;"	t	typeref:typename:int
ImGuiSortDirection_	../ext/imgui/imgui.h	/^enum ImGuiSortDirection_$/;"	g
ImGuiSortDirection_Ascending	../ext/imgui/imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_Descending	../ext/imgui/imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_None	../ext/imgui/imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection_
ImGuiStorage	../ext/imgui/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	../ext/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	../ext/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	../ext/imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	../ext/imgui/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	../ext/imgui/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleVar	../ext/imgui/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	../ext/imgui/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	../ext/imgui/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	../ext/imgui/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_CellPadding,         \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	../ext/imgui/imgui.h	/^    ImGuiStyleVar_DisabledAlpha,       \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	../ext/imgui/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	../ext/imgui/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	../ext/imgui/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	../ext/imgui/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	../ext/imgui/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBarFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlags_	../ext/imgui/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyDefault_	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_TabListPopupButton	../ext/imgui/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabItemFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlags_	../ext/imgui/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Leading	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID(tab->ID)\//;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7    \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	../ext/imgui/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTableBgTarget	../ext/imgui/imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	../ext/imgui/imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	../ext/imgui/imgui.h	/^    ImGuiTableBgTarget_CellBg                       = 3         \/\/ Set cell background color (/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	../ext/imgui/imgui.h	/^    ImGuiTableBgTarget_None                         = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	../ext/imgui/imgui.h	/^    ImGuiTableBgTarget_RowBg0                       = 1,        \/\/ Set row background color 0 /;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	../ext/imgui/imgui.h	/^    ImGuiTableBgTarget_RowBg1                       = 2,        \/\/ Set row background color 1 /;"	e	enum:ImGuiTableBgTarget_
ImGuiTableColumnFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	../ext/imgui/imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_DefaultHide	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30   \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will not subm/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	../ext/imgui/imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnSortSpecs	../ext/imgui/imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	../ext/imgui/imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	../ext/imgui/imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	../ext/imgui/imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	../ext/imgui/imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	../ext/imgui/imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	../ext/imgui/imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	../ext/imgui/imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	../ext/imgui/imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	../ext/imgui/imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	../ext/imgui/imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	../ext/imgui/imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	../ext/imgui/imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	../ext/imgui/imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	../ext/imgui/imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	../ext/imgui/imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	../ext/imgui/imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	../ext/imgui/imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableRowFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	../ext/imgui/imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	../ext/imgui/imgui.h	/^    ImGuiTableRowFlags_Headers                      = 1 << 0    \/\/ Identify header row (set de/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	../ext/imgui/imgui.h	/^    ImGuiTableRowFlags_None                         = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSortSpecs	../ext/imgui/imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	../ext/imgui/imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTextBuffer	../ext/imgui/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	../ext/imgui/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	../ext/imgui/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextRange	../ext/imgui/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	../ext/imgui/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	../ext/imgui/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTreeNodeFlags	../ext/imgui/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlags_	../ext/imgui/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_CollapsingHeader	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	../ext/imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiViewport	../ext/imgui/imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	../ext/imgui/imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	../ext/imgui/imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	../ext/imgui/imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_IsPlatformMonitor	../ext/imgui/imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	../ext/imgui/imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	../ext/imgui/imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	../ext/imgui/imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2    \/\/ Platform Window: is created\/ma/;"	e	enum:ImGuiViewportFlags_
ImGuiWindowFlags	../ext/imgui/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	../ext/imgui/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] On child window: allow gamep/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	../ext/imgui/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImNewWrapper	../ext/imgui/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImS16	../ext/imgui/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	../ext/imgui/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	../ext/imgui/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	../ext/imgui/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImTextureID	../ext/imgui/imgui.h	/^typedef void* ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:void *
ImU16	../ext/imgui/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	../ext/imgui/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	../ext/imgui/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	../ext/imgui/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImVec2	../ext/imgui/imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	../ext/imgui/imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	../ext/imgui/imgui.h	/^struct ImVec2$/;"	s
ImVec4	../ext/imgui/imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	../ext/imgui/imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	../ext/imgui/imgui.h	/^struct ImVec4$/;"	s
ImVector	../ext/imgui/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	../ext/imgui/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	../ext/imgui/imgui.h	/^struct ImVector$/;"	s
ImWchar	../ext/imgui/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	../ext/imgui/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	../ext/imgui/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	../ext/imgui/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
ImeWindowHandle	../ext/imgui/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ [Obsolete] Set ImGuiV/;"	m	struct:ImGuiIO	typeref:typename:void *
IndentSpacing	../ext/imgui/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
IndexAdvanceX	../ext/imgui/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexLookup	../ext/imgui/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IniFilename	../ext/imgui/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	../ext/imgui/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InputBuf	../ext/imgui/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputLineHeight	../ext/imgui/imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	../ext/imgui/imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	../ext/imgui/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	../ext/imgui/imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
IsActive	../ext/imgui/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsBuilt	../ext/imgui/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsDataType	../ext/imgui/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDelivery	../ext/imgui/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsLoaded	../ext/imgui/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsPacked	../ext/imgui/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPreview	../ext/imgui/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
ItemInnerSpacing	../ext/imgui/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacing	../ext/imgui/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemsCount	../ext/imgui/imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsHeight	../ext/imgui/imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
KeyAlt	../ext/imgui/imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	../ext/imgui/imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyMap	../ext/imgui/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];             \/\/ [LEGACY] Input: map of indices into the/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	../ext/imgui/imgui.h	/^    ImGuiModFlags KeyMods;                          \/\/ Key mods flags (same as io.KeyCtrl\/Key/;"	m	struct:ImGuiIO	typeref:typename:ImGuiModFlags
KeyRepeatDelay	../ext/imgui/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	../ext/imgui/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	../ext/imgui/imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	../ext/imgui/imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysData	../ext/imgui/imgui.h	/^    ImGuiKeyData KeysData[ImGuiKey_KeysData_SIZE];  \/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysDown	../ext/imgui/imgui.h	/^    bool        KeysDown[ImGuiKey_COUNT];           \/\/ [LEGACY] Input: Keyboard keys that are /;"	m	struct:ImGuiIO	typeref:typename:bool[]
ListBoxFooter	../ext/imgui/imgui.h	/^    static inline void  ListBoxFooter() { EndListBox(); }$/;"	f	namespace:ImGui	typeref:typename:void
ListBoxHeader	../ext/imgui/imgui.h	/^    static inline bool  ListBoxHeader(const char* label, const ImVec2& size = ImVec2(0, 0)) { re/;"	f	namespace:ImGui	typeref:typename:bool
Locked	../ext/imgui/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogFilename	../ext/imgui/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogSliderDeadzone	../ext/imgui/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
MergeMode	../ext/imgui/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MetricsActiveAllocations	../ext/imgui/imgui.h	/^    int         MetricsActiveAllocations;           \/\/ Number of active allocations, updated b/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsActiveWindows	../ext/imgui/imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderIndices	../ext/imgui/imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	../ext/imgui/imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	../ext/imgui/imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	../ext/imgui/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
MouseClicked	../ext/imgui/imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	../ext/imgui/imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	../ext/imgui/imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	../ext/imgui/imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	../ext/imgui/imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursorScale	../ext/imgui/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseDelta	../ext/imgui/imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	../ext/imgui/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	../ext/imgui/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	../ext/imgui/imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	../ext/imgui/imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	../ext/imgui/imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	../ext/imgui/imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	../ext/imgui/imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	../ext/imgui/imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceSqr	../ext/imgui/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	../ext/imgui/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	../ext/imgui/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MousePos	../ext/imgui/imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePosPrev	../ext/imgui/imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	../ext/imgui/imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseWheel	../ext/imgui/imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelH	../ext/imgui/imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. Most users don'/;"	m	struct:ImGuiIO	typeref:typename:float
Name	../ext/imgui/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
NavActive	../ext/imgui/imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavInputs	../ext/imgui/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT];     \/\/ Gamepad inputs. Cleared back to zero by/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDuration	../ext/imgui/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDurationPrev	../ext/imgui/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavVisible	../ext/imgui/imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation is visible/;"	m	struct:ImGuiIO	typeref:typename:bool
OpenPopupContextItem	../ext/imgui/imgui.h	/^    static inline void  OpenPopupContextItem(const char* str_id = NULL, ImGuiMouseButton mb = 1)/;"	f	namespace:ImGui	typeref:typename:void
OversampleH	../ext/imgui/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	../ext/imgui/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
PackIdLines	../ext/imgui/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	../ext/imgui/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PathBezierCurveTo	../ext/imgui/imgui.h	/^    inline    void  PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int /;"	f	struct:ImDrawList	typeref:typename:void
PathClear	../ext/imgui/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	../ext/imgui/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	../ext/imgui/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	../ext/imgui/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathStroke	../ext/imgui/imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	../ext/imgui/imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
PixelSnapH	../ext/imgui/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PlatformHandleRaw	../ext/imgui/imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PopupBorderSize	../ext/imgui/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupRounding	../ext/imgui/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	../ext/imgui/imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	../ext/imgui/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Preview	../ext/imgui/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PrimVtx	../ext/imgui/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	../ext/imgui/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	../ext/imgui/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
RasterizerMultiply	../ext/imgui/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f/;"	m	struct:ImFontConfig	typeref:typename:float
RefFrame	../ext/imgui/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
Scale	../ext/imgui/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScrollbarRounding	../ext/imgui/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	../ext/imgui/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
SelectAll	../ext/imgui/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectableTextAlign	../ext/imgui/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectionEnd	../ext/imgui/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	../ext/imgui/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SetBit	../ext/imgui/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetClipboardTextFn	../ext/imgui/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetHSV	../ext/imgui/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetPlatformImeDataFn	../ext/imgui/imgui.h	/^    void        (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImGuiViewport * viewport,ImGuiPlatformImeData * data)
SetTexID	../ext/imgui/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
Size	../ext/imgui/imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	../ext/imgui/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
SizePixels	../ext/imgui/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SliderFloat	../ext/imgui/imgui.h	/^    static inline bool  SliderFloat(const char* label, float* v, float v_min, float v_max, const/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat2	../ext/imgui/imgui.h	/^    static inline bool  SliderFloat2(const char* label, float v[2], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat3	../ext/imgui/imgui.h	/^    static inline bool  SliderFloat3(const char* label, float v[3], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SliderFloat4	../ext/imgui/imgui.h	/^    static inline bool  SliderFloat4(const char* label, float v[4], float v_min, float v_max, co/;"	f	namespace:ImGui	typeref:typename:bool
SortDirection	../ext/imgui/imgui.h	/^    ImGuiSortDirection          SortDirection : 8;  \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection:8
SortOrder	../ext/imgui/imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SourceId	../ext/imgui/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	../ext/imgui/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Specs	../ext/imgui/imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	../ext/imgui/imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	../ext/imgui/imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
StartPosY	../ext/imgui/imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
TabBorderSize	../ext/imgui/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabMinWidthForCloseButton	../ext/imgui/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appears on an/;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	../ext/imgui/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
TempData	../ext/imgui/imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TexDesiredWidth	../ext/imgui/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	../ext/imgui/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	../ext/imgui/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	../ext/imgui/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexPixelsAlpha8	../ext/imgui/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	../ext/imgui/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	../ext/imgui/imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	../ext/imgui/imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	../ext/imgui/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvScale	../ext/imgui/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	../ext/imgui/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexWidth	../ext/imgui/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
TextureId	../ext/imgui/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	../ext/imgui/imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
TotalIdxCount	../ext/imgui/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	../ext/imgui/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TouchExtraPadding	../ext/imgui/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
U0	../ext/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	../ext/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
Used4kPagesMap	../ext/imgui/imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	../ext/imgui/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	../ext/imgui/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	../ext/imgui/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserData	../ext/imgui/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	../ext/imgui/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data f/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	../ext/imgui/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
V0	../ext/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	../ext/imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
Valid	../ext/imgui/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	../ext/imgui/imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Visible	../ext/imgui/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VtxBuffer	../ext/imgui/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	../ext/imgui/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	../ext/imgui/imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
WantCaptureKeyboard	../ext/imgui/imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouse	../ext/imgui/imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseUnlessPopupClose	../ext/imgui/imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSaveIniSettings	../ext/imgui/imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	../ext/imgui/imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	../ext/imgui/imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantVisible	../ext/imgui/imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
Width	../ext/imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
WindowBorderSize	../ext/imgui/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowMenuButtonPosition	../ext/imgui/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	../ext/imgui/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	../ext/imgui/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowRounding	../ext/imgui/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowTitleAlign	../ext/imgui/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WorkPos	../ext/imgui/imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkSize	../ext/imgui/imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
X	../ext/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	../ext/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	../ext/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	../ext/imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	../ext/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	../ext/imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
_Channels	../ext/imgui/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClipRectStack	../ext/imgui/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	../ext/imgui/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	../ext/imgui/imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	../ext/imgui/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	../ext/imgui/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	../ext/imgui/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:const ImDrawListSharedData *
_FringeScale	../ext/imgui/imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_IdxBuffer	../ext/imgui/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	../ext/imgui/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OwnerName	../ext/imgui/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	../ext/imgui/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_Splitter	../ext/imgui/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	../ext/imgui/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_UnusedPadding	../ext/imgui/imgui.h	/^    void*       _UnusedPadding;                                     \/\/ Unused field to keep da/;"	m	struct:ImGuiIO	typeref:typename:void *
_VtxCurrentIdx	../ext/imgui/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	../ext/imgui/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__anonfe7907ab010a	../ext/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
_grow_capacity	../ext/imgui/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
b	../ext/imgui/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	../ext/imgui/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	../ext/imgui/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
begin	../ext/imgui/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	../ext/imgui/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	../ext/imgui/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
c_str	../ext/imgui/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
capacity	../ext/imgui/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
clear	../ext/imgui/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	../ext/imgui/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear_delete	../ext/imgui/imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	../ext/imgui/imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
col	../ext/imgui/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
const_iterator	../ext/imgui/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	../ext/imgui/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
e	../ext/imgui/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
empty	../ext/imgui/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	../ext/imgui/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	../ext/imgui/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
end	../ext/imgui/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	../ext/imgui/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	../ext/imgui/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
erase	../ext/imgui/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	../ext/imgui/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	../ext/imgui/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
find	../ext/imgui/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	../ext/imgui/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	../ext/imgui/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	../ext/imgui/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
front	../ext/imgui/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	../ext/imgui/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
index_from_ptr	../ext/imgui/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
insert	../ext/imgui/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
iterator	../ext/imgui/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
key	../ext/imgui/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
max_size	../ext/imgui/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
operator =	../ext/imgui/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); memcpy(/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ImU32	../ext/imgui/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	../ext/imgui/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	../ext/imgui/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	../ext/imgui/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	../ext/imgui/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator [] 	../ext/imgui/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ W/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	../ext/imgui/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ W/;"	f	struct:ImVec2	typeref:typename:float &
operator bool	../ext/imgui/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	f	struct:ImGuiOnceUponAFrame
operator delete	../ext/imgui/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator new	../ext/imgui/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
pop_back	../ext/imgui/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	../ext/imgui/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
push_back	../ext/imgui/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	../ext/imgui/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
reserve	../ext/imgui/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	../ext/imgui/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
resize	../ext/imgui/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	../ext/imgui/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
shrink	../ext/imgui/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
size	../ext/imgui/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	../ext/imgui/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size_in_bytes	../ext/imgui/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
swap	../ext/imgui/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
uv	../ext/imgui/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
val_f	../ext/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonfe7907ab010a	typeref:typename:float
val_i	../ext/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonfe7907ab010a	typeref:typename:int
val_p	../ext/imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anonfe7907ab010a	typeref:typename:void *
value_type	../ext/imgui/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
w	../ext/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	../ext/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	../ext/imgui/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	../ext/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	../ext/imgui/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
z	../ext/imgui/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
~ImDrawList	../ext/imgui/imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	../ext/imgui/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImVector	../ext/imgui/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
